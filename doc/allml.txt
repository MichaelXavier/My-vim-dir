*allml.txt*  Useful XML/HTML mappings and more

Author:  Tim Pope <vimNOSPAM@tpope.info>        *allml-author*
License: Same terms as Vim itself (see |license|)

INTRODUCTION                                    *allml*

These are my personal mappings for XML/XHTML editing, particularly with
dynamic content like PHP/ASP/eRuby. 

Combined with *surround.vim*, you also get three "see |surround-replacements|".
Below, the indicates the location of the wrapped text.  See the documentation of
surround.vim for details.

  Character     Replacement
  -             <% ^ %>
  =             <%= ^ %>
  #             <%# ^ %>

Aditionally, you might find these helpful in your vimrc
>
  inoremap <M-o>       <Esc>o
  inoremap <C-j>       <Down>
  let g:allml_global_maps = 1
<
MAPPINGS                                        *allml-mappings*

The table below shows what happens if the binding is pressed on the end of a
line consisting of "foo".

  Mapping       Changed to   (cursor = ^)
  <C-X>=        foo<%= ^ %>
  <C-X>+        <%= foo^ %>
  <C-X>-        foo<% ^ %>
  <C-X>_        <% foo^ %>
  <C-X>'        foo<%# ^ %>         (mnemonic: ' is a comment in ASP with VBS)
  <C-X>"        <%# foo^ %>
  <C-X><Space>  <foo>^</foo>
  <C-X><CR>     <foo>\n^\n</foo>
  <C-X>/        Last HTML tag closed (requires Vim 7)
  <C-X>!        <!DOCTYPE...>/<?xml ...?> (Vim 7 allows selection from menu)
  <C-X>@        <link rel="stylesheet" type="text/css" href="/stylesheets/^.css" />
                (mnemonic: @ is used for importing in a CSS file)
  <C-X>#        <meta http-equiv="Content-Type" ... />
  <C-X>$        <script type="text/javascript" src="/javascripts/^.css"></script>
                (mnemonic: $ is valid in javascript identifiers)

For the bindings that generate HTML tag pairs, in a few cases, attributes
will be automatically added.  For example, script becomes
<script type="text/javascript">

Note that the doctype insertion uses Vim completion, which in 7.0 includes
erroneous doctypes.  Lowercase the first occurance of "HTML" to fix them.

ENCODING                                        *allml-encoding*

Encoding mappings are provided to encode URLs and escape HTML/XML.  By default,
they are only available in the buffers where allml.vim is activated. If you
want them globally, simply add mappings for each "global map" in the table
below that you want.

If you want all of them with a <Leader> prefix, you can 
>
let g:allml_global_maps = 1.  (This also gets you a global <C-X>/ map.)
<
The first four maps below take a {motion} to specify the text when used in
normal mode, and also work in visual mode.  The second four are for normal
mode only and always encode/decode the current line.

  Default map      Global map
  <LocalLeader>eu  <Plug>allmlUrlEncode
  <LocalLeader>du  <Plug>allmlUrlDecode
  <LocalLeader>ex  <Plug>allmlXmlEncode
  <LocalLeader>dx  <Plug>allmlXmlDecode
  <LocalLeader>euu <Plug>allmlLineUrlEncode
  <LocalLeader>duu <Plug>allmlLineUrlDecode
  <LocalLeader>exx <Plug>allmlLineXmlEncode
  <LocalLeader>dxx <Plug>allmlLineXmlDecode

Don't let the names fool you, the XmlEncode mappings work on HTML as well,
and add a few additional escaped characters if the buffer is confirmed to
contain HTML.

There are also a few insert mode mappings.  The first two take the next
character to be typed and encode it.  The second two put Vim into a special
mode where characters are encoded automatically when required.  This is
quite cool for demos but is of limited practical value otherwise.

<C-V>%           <Plug>allmlUrlV
<C-V>&           <Plug>allmlXmlV
<C-X>%           <Plug>allmlUrlEncode
<C-X>&           <Plug>allmlXmlEncode

CUSTOMIZING                                     *allml-customizing*

Because they are personal, less effort has been put into customizability.
If you like these mappings but the lack of customizability poses an issue
for you, let me know).

 vim:tw=78:ts=8:ft=help:norl:
